

on:
  push:
    branches:
      - master

env:
  NETWORK: "krypto-net"
  SSH_PORT: 22


jobs:
  deploy-app:
    name: Deploy App
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Deploy Backend PROD - Executing remote command
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          NETWORK: ${{ env.NETWORK }}
          IMAGE_NAME: kryptobot-app
          DOT_ENV: ${{ secrets.DOT_ENV_BE }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          GITREPO: git@github.com:leantrace/${{ github.event.repository.name }}.git
        uses: appleboy/ssh-action@master
        with:
          envs: SSH_HOST,NETWORK,IMAGE_NAME,DOT_ENV,BRANCH,GITREPO
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # clone project
            rm -rf $(echo $IMAGE_NAME)
            git clone --branch $(echo $BRANCH) $(echo $GITREPO) $(echo $IMAGE_NAME)
            cd $(echo $IMAGE_NAME)/etc

            export BUILD_ARGS=""
            for env in $DOT_ENV
            do
              echo "$env" >> .env
              export BUILD_ARGS="$BUILD_ARGS --build-arg $env"
            done
            echo $BUILD_ARGS

            # remove container completely if exists
            [ "$(docker ps -q -a -f name=$(echo $IMAGE_NAME))" ] && \
            docker stop $(echo $IMAGE_NAME) && docker rm $(echo $IMAGE_NAME) && \
            docker image rm $(echo $IMAGE_NAME)

            docker build $BUILD_ARGS --no-cache --file Dockerfile --tag $(echo $IMAGE_NAME) .

            # create nep network if not exists
            ! [ "$(docker network ls | grep $NETWORK)" ] && \
            docker network create --driver bridge $(echo $NETWORK)
            docker run -d \
              --restart always \
              --network $(echo $NETWORK) \
              --mount type=bind,source=/home/${{ secrets.SSH_USER }}/data,target=/data \
              --mount type=bind,source=/home/${{ secrets.SSH_USER }}/db,target=/var/lib/K/db \
              -p 3000:3000 \
              --name $(echo $IMAGE_NAME) \
              $IMAGE_NAME
