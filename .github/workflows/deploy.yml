

on:
  push:
    branches:
      - master

env:
  NETWORK: "leantrace-net"
  SSH_PORT: 22
  SSH_USER: ubuntu


jobs:
  deploy-app:
    name: Deploy App
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Deploy Backend PROD - Executing remote command
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          NETWORK: ${{ env.NETWORK }}
          IMAGE_NAME: kryptobot-app
          DOT_ENV: ${{ secrets.DOT_ENV_BE }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          GITREPO: git@github.com:leantrace/${{ github.event.repository.name }}.git
        uses: appleboy/ssh-action@master
        with:
          envs: SSH_HOST,NETWORK,IMAGE_NAME,DOT_ENV,BRANCH,GITREPO
          host: ${{ secrets.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # clone project
            rm -rf $(echo $IMAGE_NAME)
            git clone --branch $(echo $BRANCH) $(echo $GITREPO) $(echo $IMAGE_NAME)
            cd $(echo $IMAGE_NAME)/etc

            export BUILD_ARGS=""
            for env in $DOT_ENV
            do
              echo "$env" >> .env
              export BUILD_ARGS="$BUILD_ARGS --build-arg $env"
            done
            echo $BUILD_ARGS

            # remove container completely if exists
            [ "$(docker ps -q -a -f name=$(echo $IMAGE_NAME))" ] && \
            docker stop $(echo $IMAGE_NAME) && docker rm $(echo $IMAGE_NAME) && \
            docker image rm $(echo $IMAGE_NAME)

            docker build $BUILD_ARGS --no-cache --file Dockerfile --tag $(echo $IMAGE_NAME) .

            # create nep network if not exists
            ! [ "$(docker network ls | grep $NETWORK)" ] && \
            docker network create --driver bridge $(echo $NETWORK)
            docker run -d \
              --restart always \
              --network $(echo $NETWORK) \
              --mount type=bind,source=/home/${{ env.SSH_USER }}/data,target=/data \
              --mount type=bind,source=/home/${{ env.SSH_USER }}/db,target=/var/lib/K/db \
              -p 443:3000 \
              --name $(echo $IMAGE_NAME) \
              $IMAGE_NAME

  deploy-proxy:
    name: Deploy Proxy
    runs-on: ubuntu-latest
    needs: [ deploy-app ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy Proxy Settings
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: proxy/*
          target: .

      - name: Build and Deploy Proxy Remote
        env:
          SERVER_NAME: crypto.leantrace.ch
          SSH_HOST: ${{ secrets.SSH_HOST }}
          NETWORK: ${{ env.NETWORK }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          IMAGE_NAME: kryptobot-px
        uses: appleboy/ssh-action@master
        with:
          envs: SERVER_NAME, NETWORK, IMAGE_NAME, SSH_HOST, ADMIN_PASSWORD
          host: ${{ secrets.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            rm -rf nginx
            mkdir -p nginx/conf.d
            mkdir -p nginx/certs
            cp proxy/default.conf nginx/conf.d
            echo "Configure proxy with SSL selfsigned"
            export CN=ec2-$(echo $SSH_HOST | sed 's/\./-/g').eu-central-1.compute.amazonaws.com
            echo $CN
            openssl req -x509 -nodes -days 3650 -subj "/C=CA/ST=QC/O=Apiable, Inc./CN=$CN" \
            -addext "subjectAltName=DNS:$CN" \
            -newkey rsa:2048 -keyout nginx/certs/cert.key -out nginx/certs/cert.crt
            sed -i "s/%SERVER_NAME%/$SERVER_NAME/g" nginx/conf.d/default.conf
            htpasswd -bc /home/${{ env.SSH_USER }}/nginx/conf.d/.htpasswd admin $ADMIN_PASSWORD
            # remove container completely if exists
            [ "$(docker ps -q -a -f name=$(echo $IMAGE_NAME))" ] && \
            docker stop $(echo $IMAGE_NAME) && docker rm $(echo $IMAGE_NAME) && \
            docker image rm $(echo $IMAGE_NAME)
            docker build --no-cache --file proxy/Dockerfile --tag $(echo $IMAGE_NAME) .
            rm -rf proxy
            ! [ "$(docker network ls | grep $NETWORK)" ] && docker network create --driver bridge $(echo $NETWORK)
            docker run -d \
              --restart always \
              --network $(echo $NETWORK) \
              --mount type=bind,source=/home/${{ env.SSH_USER }}/nginx/conf.d,target=/etc/nginx/conf.d \
              --mount type=bind,source=/home/${{ env.SSH_USER }}/nginx/certs,target=/etc/nginx/certs \
              -p 80:80 -p 443:443 \
              --name $(echo $IMAGE_NAME) \
              $IMAGE_NAME